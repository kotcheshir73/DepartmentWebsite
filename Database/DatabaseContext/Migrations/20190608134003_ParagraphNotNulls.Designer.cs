// <auto-generated />
using System;
using DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DatabaseContext.Migrations
{
    [DbContext(typeof(DepartmentDatabaseContext))]
    [Migration("20190608134003_ParagraphNotNulls")]
    partial class ParagraphNotNulls
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Models.AcademicYearData.AcademicPlan", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<int?>("AcademicCourses");

                    b.Property<int>("AcademicLevel");

                    b.Property<Guid>("AcademicYearId");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<Guid?>("EducationDirectionId");

                    b.Property<bool>("IsDeleted");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("EducationDirectionId");

                    b.ToTable("AcademicPlans");
                });

            modelBuilder.Entity("Models.AcademicYearData.AcademicPlanRecord", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("AcademicPlanId");

                    b.Property<Guid?>("ContingentId");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<Guid>("DisciplineId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("Semester");

                    b.Property<int>("Zet");

                    b.HasKey("Id");

                    b.HasIndex("AcademicPlanId");

                    b.HasIndex("ContingentId");

                    b.HasIndex("DisciplineId");

                    b.ToTable("AcademicPlanRecords");
                });

            modelBuilder.Entity("Models.AcademicYearData.AcademicPlanRecordElement", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("AcademicPlanRecordId");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<decimal>("FactHours");

                    b.Property<bool>("IsDeleted");

                    b.Property<decimal>("PlanHours");

                    b.Property<Guid>("TimeNormId");

                    b.HasKey("Id");

                    b.HasIndex("AcademicPlanRecordId");

                    b.HasIndex("TimeNormId");

                    b.ToTable("AcademicPlanRecordElements");
                });

            modelBuilder.Entity("Models.AcademicYearData.AcademicPlanRecordMission", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("AcademicPlanRecordElementId");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<decimal>("Hours");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("LecturerId");

                    b.HasKey("Id");

                    b.HasIndex("AcademicPlanRecordElementId");

                    b.HasIndex("LecturerId");

                    b.ToTable("AcademicPlanRecordMissions");
                });

            modelBuilder.Entity("Models.AcademicYearData.AcademicYear", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("AcademicYears");
                });

            modelBuilder.Entity("Models.AcademicYearData.Contingent", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("AcademicYearId");

                    b.Property<string>("ContingentName")
                        .IsRequired();

                    b.Property<int>("CountGroups");

                    b.Property<int>("CountStudetns");

                    b.Property<int>("CountSubgroups");

                    b.Property<int>("Course");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<Guid>("EducationDirectionId");

                    b.Property<bool>("IsDeleted");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("EducationDirectionId");

                    b.ToTable("Contingents");
                });

            modelBuilder.Entity("Models.AcademicYearData.DisciplineTimeDistribution", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("AcademicPlanRecordId");

                    b.Property<string>("Comment");

                    b.Property<string>("CommentWishesOfTeacher");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("StudentGroupId");

                    b.HasKey("Id");

                    b.HasIndex("AcademicPlanRecordId");

                    b.HasIndex("StudentGroupId");

                    b.ToTable("DisciplineTimeDistributions");
                });

            modelBuilder.Entity("Models.AcademicYearData.DisciplineTimeDistributionClassroom", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("ClassroomDescription");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<Guid>("DisciplineTimeDistributionId");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("TimeNormId");

                    b.HasKey("Id");

                    b.HasIndex("DisciplineTimeDistributionId");

                    b.HasIndex("TimeNormId");

                    b.ToTable("DisciplineTimeDistributionClassrooms");
                });

            modelBuilder.Entity("Models.AcademicYearData.DisciplineTimeDistributionRecord", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<Guid>("DisciplineTimeDistributionId");

                    b.Property<double>("Hours");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("TimeNormId");

                    b.Property<int>("WeekNumber");

                    b.HasKey("Id");

                    b.HasIndex("DisciplineTimeDistributionId");

                    b.HasIndex("TimeNormId");

                    b.ToTable("DisciplineTimeDistributionRecords");
                });

            modelBuilder.Entity("Models.AcademicYearData.IndividualPlan", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("AcademicYearId");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("LecturerId");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("LecturerId");

                    b.ToTable("IndividualPlans");
                });

            modelBuilder.Entity("Models.AcademicYearData.IndividualPlanKindOfWork", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<Guid>("IndividualPlanTitleId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.Property<string>("TimeNormDescription");

                    b.HasKey("Id");

                    b.HasIndex("IndividualPlanTitleId");

                    b.ToTable("IndividualPlanKindOfWorks");
                });

            modelBuilder.Entity("Models.AcademicYearData.IndividualPlanNIRContractualWork", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<Guid>("IndividualPlanId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("JobContent");

                    b.Property<string>("PlannedTerm");

                    b.Property<string>("Post");

                    b.Property<bool>("ReadyMark");

                    b.HasKey("Id");

                    b.HasIndex("IndividualPlanId");

                    b.ToTable("IndividualPlanNIRContractualWorks");
                });

            modelBuilder.Entity("Models.AcademicYearData.IndividualPlanNIRScientificArticle", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<Guid>("IndividualPlanId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.Property<string>("Publishing");

                    b.Property<string>("Status");

                    b.Property<string>("TypeOfPublication");

                    b.Property<double>("Volume");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("IndividualPlanId");

                    b.ToTable("IndividualPlanNIRScientificArticles");
                });

            modelBuilder.Entity("Models.AcademicYearData.IndividualPlanRecord", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<double>("FactAutumn");

                    b.Property<double>("FactSpring");

                    b.Property<Guid>("IndividualPlanId");

                    b.Property<Guid>("IndividualPlanKindOfWorkId");

                    b.Property<bool>("IsDeleted");

                    b.Property<double>("PlanAutumn");

                    b.Property<double>("PlanSpring");

                    b.HasKey("Id");

                    b.HasIndex("IndividualPlanId");

                    b.HasIndex("IndividualPlanKindOfWorkId");

                    b.ToTable("IndividualPlanRecords");
                });

            modelBuilder.Entity("Models.AcademicYearData.IndividualPlanTitle", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Order");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("IndividualPlanTitles");
                });

            modelBuilder.Entity("Models.AcademicYearData.LecturerWorkload", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("AcademicYearId");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("LecturerId");

                    b.Property<double>("Workload");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("LecturerId");

                    b.ToTable("LecturerWorkload");
                });

            modelBuilder.Entity("Models.AcademicYearData.SeasonDates", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("AcademicYearId");

                    b.Property<DateTime>("DateBeginExamination");

                    b.Property<DateTime>("DateBeginFirstHalfSemester");

                    b.Property<DateTime>("DateBeginOffset");

                    b.Property<DateTime?>("DateBeginPractice");

                    b.Property<DateTime>("DateBeginSecondHalfSemester");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<DateTime>("DateEndExamination");

                    b.Property<DateTime>("DateEndFirstHalfSemester");

                    b.Property<DateTime>("DateEndOffset");

                    b.Property<DateTime?>("DateEndPractice");

                    b.Property<DateTime>("DateEndSecondHalfSemester");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearId");

                    b.ToTable("SeasonDates");
                });

            modelBuilder.Entity("Models.AcademicYearData.StreamLesson", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("AcademicYearId");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Semester");

                    b.Property<decimal>("StreamLessonHours");

                    b.Property<string>("StreamLessonName");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearId");

                    b.ToTable("StreamLessons");
                });

            modelBuilder.Entity("Models.AcademicYearData.StreamLessonRecord", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("AcademicPlanRecordElementId");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsMain");

                    b.Property<Guid>("StreamLessonId");

                    b.HasKey("Id");

                    b.HasIndex("AcademicPlanRecordElementId");

                    b.HasIndex("StreamLessonId");

                    b.ToTable("StreamLessonRecords");
                });

            modelBuilder.Entity("Models.AcademicYearData.TimeNorm", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("AcademicYearId");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<Guid>("DisciplineBlockId");

                    b.Property<decimal?>("Hours");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("KindOfLoadAttributeName")
                        .HasMaxLength(10);

                    b.Property<string>("KindOfLoadBlueAsteriskAttributeName")
                        .HasMaxLength(100);

                    b.Property<string>("KindOfLoadBlueAsteriskName")
                        .HasMaxLength(100);

                    b.Property<string>("KindOfLoadBlueAsteriskPracticName")
                        .HasMaxLength(100);

                    b.Property<string>("KindOfLoadName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("KindOfLoadType");

                    b.Property<decimal?>("NumKoef");

                    b.Property<int?>("TimeNormAcademicLevel");

                    b.Property<int>("TimeNormKoef");

                    b.Property<string>("TimeNormName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("TimeNormOrder");

                    b.Property<string>("TimeNormShortName")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<bool>("UseInLearningProgress");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("DisciplineBlockId");

                    b.ToTable("TimeNorms");
                });

            modelBuilder.Entity("Models.Authentication.DepartmentAccess", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<int>("AccessType");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Operation");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("DepartmentAccesses");
                });

            modelBuilder.Entity("Models.Authentication.DepartmentRole", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("RoleName");

                    b.HasKey("Id");

                    b.ToTable("DepartmentRoles");
                });

            modelBuilder.Entity("Models.Authentication.DepartmentUser", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<byte[]>("Avatar");

                    b.Property<DateTime?>("DateBanned");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<DateTime?>("DateLastVisit");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsLocked");

                    b.Property<Guid?>("LecturerId");

                    b.Property<string>("PasswordHash");

                    b.Property<Guid?>("StudentId");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("LecturerId");

                    b.HasIndex("StudentId");

                    b.ToTable("DepartmentUsers");
                });

            modelBuilder.Entity("Models.Authentication.DepartmentUserRole", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("RoleId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("DepartmentUserRoles");
                });

            modelBuilder.Entity("Models.Base.Classroom", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<int>("Capacity");

                    b.Property<int>("ClassroomType");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("NotUseInSchedule");

                    b.Property<string>("Number");

                    b.HasKey("Id");

                    b.ToTable("Classrooms");
                });

            modelBuilder.Entity("Models.Base.Discipline", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<Guid>("DisciplineBlockId");

                    b.Property<string>("DisciplineBlueAsteriskName")
                        .HasMaxLength(200);

                    b.Property<string>("DisciplineName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<Guid?>("DisciplineParentId");

                    b.Property<string>("DisciplineShortName")
                        .HasMaxLength(20);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsParent");

                    b.HasKey("Id");

                    b.HasIndex("DisciplineBlockId");

                    b.ToTable("Disciplines");
                });

            modelBuilder.Entity("Models.Base.DisciplineBlock", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<string>("DisciplineBlockBlueAsteriskName")
                        .HasMaxLength(20);

                    b.Property<int>("DisciplineBlockOrder");

                    b.Property<bool>("DisciplineBlockUseForGrouping");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("DisciplineBlocks");
                });

            modelBuilder.Entity("Models.Base.EducationDirection", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Cipher")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("EducationDirections");
                });

            modelBuilder.Entity("Models.Base.Lecturer", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(10);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<DateTime>("DateBirth");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<string>("Description");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("HomeNumber")
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<Guid>("LecturerPostId");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<byte[]>("Photo");

                    b.Property<int>("Post");

                    b.Property<int>("Rank");

                    b.Property<int>("Rank2");

                    b.HasKey("Id");

                    b.HasIndex("LecturerPostId");

                    b.ToTable("Lecturers");
                });

            modelBuilder.Entity("Models.Base.LecturerPost", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<int>("Hours");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("PostTitle");

                    b.HasKey("Id");

                    b.ToTable("LecturerPosts");
                });

            modelBuilder.Entity("Models.Base.Student", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<string>("Description");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsSteward");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("NumberOfBook")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("Patronymic")
                        .HasMaxLength(30);

                    b.Property<byte[]>("Photo");

                    b.Property<Guid?>("StudentGroupId");

                    b.Property<int>("StudentState");

                    b.HasKey("Id");

                    b.HasIndex("StudentGroupId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Models.Base.StudentGroup", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<int>("Course");

                    b.Property<Guid?>("CuratorId");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<Guid>("EducationDirectionId");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<bool>("IsDeleted");

                    b.HasKey("Id");

                    b.HasIndex("CuratorId");

                    b.HasIndex("EducationDirectionId");

                    b.ToTable("StudentGroups");
                });

            modelBuilder.Entity("Models.Base.StudentOrder", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("OrderNumber")
                        .IsRequired();

                    b.Property<int>("StudentOrderType");

                    b.HasKey("Id");

                    b.ToTable("StudentOrders");
                });

            modelBuilder.Entity("Models.Base.StudentOrderBlock", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<Guid?>("EducationDirectionId");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("StudentOrderId");

                    b.Property<int>("StudentOrderType");

                    b.HasKey("Id");

                    b.HasIndex("EducationDirectionId");

                    b.HasIndex("StudentOrderId");

                    b.ToTable("StudentOrderBlocks");
                });

            modelBuilder.Entity("Models.Base.StudentOrderBlockStudent", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<string>("Info");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("StudentGroupFromId");

                    b.Property<Guid?>("StudentGroupToId");

                    b.Property<Guid>("StudentId");

                    b.Property<Guid>("StudentOrderBlockId");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("StudentOrderBlockId");

                    b.ToTable("StudentOrderBlockStudents");
                });

            modelBuilder.Entity("Models.CurrentSettings", b =>
                {
                    b.Property<string>("Key");

                    b.Property<string>("Value");

                    b.HasKey("Key");

                    b.ToTable("CurrentSettings");
                });

            modelBuilder.Entity("Models.Examination.ExaminationList", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid?>("AcademicPlanRecordId");

                    b.Property<Guid>("AcademicYearId");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<Guid>("DisciplineId");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("LecturerId");

                    b.Property<int>("Number");

                    b.Property<string>("Score");

                    b.Property<int>("Semester");

                    b.Property<Guid>("StudentGroupId");

                    b.Property<Guid>("StudentId");

                    b.Property<int>("TypeOfTest");

                    b.HasKey("Id");

                    b.HasIndex("AcademicPlanRecordId");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("LecturerId");

                    b.HasIndex("StudentGroupId");

                    b.HasIndex("StudentId");

                    b.ToTable("ExaminationLists");
                });

            modelBuilder.Entity("Models.Examination.ExaminationTemplate", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<Guid>("DisciplineId");

                    b.Property<Guid?>("EducationDirectionId");

                    b.Property<Guid?>("ExaminationTemplateId");

                    b.Property<string>("ExaminationTemplateName");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("Semester");

                    b.Property<Guid?>("TicketTemplateId");

                    b.HasKey("Id");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("EducationDirectionId");

                    b.HasIndex("ExaminationTemplateId");

                    b.ToTable("ExaminationTemplates");
                });

            modelBuilder.Entity("Models.Examination.ExaminationTemplateBlock", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("BlockName");

                    b.Property<string>("CombineBlocks");

                    b.Property<int>("CountQuestionInTicket");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<Guid>("ExaminationTemplateId");

                    b.Property<bool>("IsCombine");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("QuestionTagInTemplate");

                    b.HasKey("Id");

                    b.HasIndex("ExaminationTemplateId");

                    b.ToTable("ExaminationTemplateBlocks");
                });

            modelBuilder.Entity("Models.Examination.ExaminationTemplateBlockQuestion", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<Guid>("ExaminationTemplateBlockId");

                    b.Property<bool>("IsDeleted");

                    b.Property<byte[]>("QuestionImage");

                    b.Property<int>("QuestionNumber");

                    b.Property<string>("QuestionText");

                    b.HasKey("Id");

                    b.HasIndex("ExaminationTemplateBlockId");

                    b.ToTable("ExaminationTemplateBlockQuestions");
                });

            modelBuilder.Entity("Models.Examination.ExaminationTemplateTicket", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<Guid>("ExaminationTemplateId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("TicketNumber");

                    b.HasKey("Id");

                    b.HasIndex("ExaminationTemplateId");

                    b.ToTable("ExaminationTemplateTickets");
                });

            modelBuilder.Entity("Models.Examination.ExaminationTemplateTicketQuestion", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<Guid>("ExaminationTemplateBlockId");

                    b.Property<Guid>("ExaminationTemplateBlockQuestionId");

                    b.Property<Guid>("ExaminationTemplateTicketId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Order");

                    b.HasKey("Id");

                    b.HasIndex("ExaminationTemplateBlockQuestionId");

                    b.HasIndex("ExaminationTemplateTicketId");

                    b.ToTable("ExaminationTemplateTicketQuestions");
                });

            modelBuilder.Entity("Models.Examination.Statement", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid?>("AcademicPlanRecordId");

                    b.Property<Guid>("AcademicYearId");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<Guid>("DisciplineId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsMain");

                    b.Property<Guid>("LecturerId");

                    b.Property<int>("Semester");

                    b.Property<Guid>("StudentGroupId");

                    b.Property<int>("TypeOfTest");

                    b.HasKey("Id");

                    b.HasIndex("AcademicPlanRecordId");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("LecturerId");

                    b.HasIndex("StudentGroupId");

                    b.ToTable("Statements");
                });

            modelBuilder.Entity("Models.Examination.StatementRecord", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Score");

                    b.Property<Guid>("StatementId");

                    b.Property<Guid>("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("StatementId");

                    b.HasIndex("StudentId");

                    b.ToTable("StatementRecords");
                });

            modelBuilder.Entity("Models.Examination.TicketTemplate", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("TemplateName");

                    b.Property<Guid?>("TicketTemplateBodyId");

                    b.HasKey("Id");

                    b.ToTable("TicketTemplates");
                });

            modelBuilder.Entity("Models.Examination.TicketTemplateBody", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("TicketTemplateBodyPropertiesId");

                    b.Property<Guid>("TicketTemplateId");

                    b.HasKey("Id");

                    b.HasIndex("TicketTemplateId")
                        .IsUnique();

                    b.ToTable("TicketTemplateBodies");
                });

            modelBuilder.Entity("Models.Examination.TicketTemplateBodyProperties", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("PageMarginBottom");

                    b.Property<string>("PageMarginFooter");

                    b.Property<string>("PageMarginGutter");

                    b.Property<string>("PageMarginLeft");

                    b.Property<string>("PageMarginRight");

                    b.Property<string>("PageMarginTop");

                    b.Property<string>("PageSizeHeight");

                    b.Property<string>("PageSizeOrient");

                    b.Property<string>("PageSizeWidth");

                    b.Property<Guid>("TicketTemplateBodyId");

                    b.HasKey("Id");

                    b.HasIndex("TicketTemplateBodyId")
                        .IsUnique();

                    b.ToTable("TicketTemplateBodyProperties");
                });

            modelBuilder.Entity("Models.Examination.TicketTemplateElementaryAttribute", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<Guid?>("TicketTemplateElementaryUnitId");

                    b.Property<Guid?>("TicketTemplateParagraphDataId");

                    b.Property<Guid?>("TicketTemplateParagraphId");

                    b.Property<Guid?>("TicketTemplateTableRowId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("TicketTemplateElementaryUnitId");

                    b.HasIndex("TicketTemplateParagraphId");

                    b.HasIndex("TicketTemplateTableRowId");

                    b.ToTable("TicketTemplateElementaryAttributes");
                });

            modelBuilder.Entity("Models.Examination.TicketTemplateElementaryUnit", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.Property<Guid?>("ParentElementaryUnitId");

                    b.Property<Guid?>("TicketTemplateParagraphDataId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("ParentElementaryUnitId");

                    b.ToTable("TicketTemplateElementaryUnits");
                });

            modelBuilder.Entity("Models.Examination.TicketTemplateParagraph", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<int>("Order");

                    b.Property<Guid?>("TicketTemplateBodyId");

                    b.Property<Guid>("TicketTemplateParagraphPropertiesId");

                    b.Property<Guid?>("TicketTemplateTableCellId");

                    b.HasKey("Id");

                    b.HasIndex("TicketTemplateBodyId");

                    b.HasIndex("TicketTemplateTableCellId");

                    b.ToTable("TicketTemplateParagraphs");
                });

            modelBuilder.Entity("Models.Examination.TicketTemplateParagraphProperties", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("IndentationFirstLine");

                    b.Property<string>("IndentationHanging");

                    b.Property<string>("IndentationLeft");

                    b.Property<string>("IndentationRight");

                    b.Property<string>("Justification");

                    b.Property<bool>("RunBold");

                    b.Property<bool>("RunItalic");

                    b.Property<string>("RunSize");

                    b.Property<bool>("RunUnderline");

                    b.Property<string>("SpacingBetweenLinesAfter");

                    b.Property<string>("SpacingBetweenLinesBefore");

                    b.Property<string>("SpacingBetweenLinesLine");

                    b.Property<string>("SpacingBetweenLinesLineRule");

                    b.Property<Guid>("TicketTemplateParagraphId");

                    b.HasKey("Id");

                    b.HasIndex("TicketTemplateParagraphId")
                        .IsUnique();

                    b.ToTable("TicketTemplateParagraphProperties");
                });

            modelBuilder.Entity("Models.Examination.TicketTemplateParagraphRun", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<int>("Order");

                    b.Property<bool>("TabChar");

                    b.Property<string>("Text");

                    b.Property<Guid>("TicketTemplateParagraphId");

                    b.Property<Guid>("TicketTemplateParagraphRunPropertiesId");

                    b.HasKey("Id");

                    b.HasIndex("TicketTemplateParagraphId");

                    b.ToTable("TicketTemplateParagraphRuns");
                });

            modelBuilder.Entity("Models.Examination.TicketTemplateParagraphRunProperties", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<bool>("RunBold");

                    b.Property<bool>("RunItalic");

                    b.Property<string>("RunSize");

                    b.Property<bool>("RunUnderline");

                    b.Property<Guid>("TicketTemplateParagraphRunId");

                    b.HasKey("Id");

                    b.HasIndex("TicketTemplateParagraphRunId")
                        .IsUnique();

                    b.ToTable("TicketTemplateParagraphRunProperties");
                });

            modelBuilder.Entity("Models.Examination.TicketTemplateTable", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid?>("ColumnsId");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.Property<Guid?>("PropertiesId");

                    b.Property<Guid?>("TicketTemplateBodyId");

                    b.HasKey("Id");

                    b.HasIndex("ColumnsId");

                    b.HasIndex("PropertiesId");

                    b.HasIndex("TicketTemplateBodyId");

                    b.ToTable("TicketTemplateTables");
                });

            modelBuilder.Entity("Models.Examination.TicketTemplateTableCell", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.Property<Guid?>("PropertiesId");

                    b.Property<Guid?>("TicketTemplateTableRowId");

                    b.HasKey("Id");

                    b.HasIndex("PropertiesId");

                    b.HasIndex("TicketTemplateTableRowId");

                    b.ToTable("TicketTemplateTableCells");
                });

            modelBuilder.Entity("Models.Examination.TicketTemplateTableRow", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.Property<Guid?>("PropertiesId");

                    b.Property<Guid?>("TicketTemplateTableId");

                    b.HasKey("Id");

                    b.HasIndex("PropertiesId");

                    b.HasIndex("TicketTemplateTableId");

                    b.ToTable("TicketTemplateTableRows");
                });

            modelBuilder.Entity("Models.LaboratoryHead.MaterialTechnicalValue", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("ClassroomId");

                    b.Property<decimal>("Cost");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<string>("DeleteReason");

                    b.Property<string>("Description");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("InventoryNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Location");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomId");

                    b.ToTable("MaterialTechnicalValues");
                });

            modelBuilder.Entity("Models.LaboratoryHead.MaterialTechnicalValueGroup", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<string>("GroupName");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Order");

                    b.HasKey("Id");

                    b.ToTable("MaterialTechnicalValueGroups");
                });

            modelBuilder.Entity("Models.LaboratoryHead.MaterialTechnicalValueRecord", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<string>("FieldName");

                    b.Property<string>("FieldValue");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("MaterialTechnicalValueGroupId");

                    b.Property<Guid>("MaterialTechnicalValueId");

                    b.Property<int>("Order");

                    b.HasKey("Id");

                    b.HasIndex("MaterialTechnicalValueGroupId");

                    b.HasIndex("MaterialTechnicalValueId");

                    b.ToTable("MaterialTechnicalValueRecords");
                });

            modelBuilder.Entity("Models.LaboratoryHead.Software", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("SoftwareDescription");

                    b.Property<string>("SoftwareK");

                    b.Property<string>("SoftwareKey");

                    b.Property<string>("SoftwareName");

                    b.HasKey("Id");

                    b.ToTable("Softwares");
                });

            modelBuilder.Entity("Models.LaboratoryHead.SoftwareRecord", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("ClaimNumber");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("MaterialTechnicalValueId");

                    b.Property<string>("SetupDescription");

                    b.Property<Guid>("SoftwareId");

                    b.HasKey("Id");

                    b.HasIndex("MaterialTechnicalValueId");

                    b.HasIndex("SoftwareId");

                    b.ToTable("SoftwareRecords");
                });

            modelBuilder.Entity("Models.LearningProgress.DisciplineLesson", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("AcademicYearId");

                    b.Property<int>("CountOfPairs");

                    b.Property<DateTime?>("Date");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<string>("Description");

                    b.Property<Guid>("DisciplineId");

                    b.Property<byte[]>("DisciplineLessonFile");

                    b.Property<Guid>("EducationDirectionId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Order");

                    b.Property<int>("Semester");

                    b.Property<Guid>("TimeNormId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("EducationDirectionId");

                    b.HasIndex("TimeNormId");

                    b.ToTable("DisciplineLessons");
                });

            modelBuilder.Entity("Models.LearningProgress.DisciplineLessonConducted", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<Guid>("DisciplineLessonId");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("StudentGroupId");

                    b.Property<string>("Subgroup");

                    b.HasKey("Id");

                    b.HasIndex("DisciplineLessonId");

                    b.HasIndex("StudentGroupId");

                    b.ToTable("DisciplineLessonConducteds");
                });

            modelBuilder.Entity("Models.LearningProgress.DisciplineLessonConductedStudent", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<decimal?>("Ball");

                    b.Property<string>("Comment");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<Guid>("DisciplineLessonConductedId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Status");

                    b.Property<Guid>("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("DisciplineLessonConductedId");

                    b.HasIndex("StudentId");

                    b.ToTable("DisciplineLessonConductedStudents");
                });

            modelBuilder.Entity("Models.LearningProgress.DisciplineLessonTask", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<string>("Description");

                    b.Property<Guid>("DisciplineLessonId");

                    b.Property<byte[]>("Image");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsNecessarily");

                    b.Property<decimal?>("MaxBall");

                    b.Property<int>("Order");

                    b.Property<string>("Task")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("DisciplineLessonId");

                    b.ToTable("DisciplineLessonTasks");
                });

            modelBuilder.Entity("Models.LearningProgress.DisciplineLessonTaskStudentAccept", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Comment");

                    b.Property<DateTime>("DateAccept");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<Guid>("DisciplineLessonTaskId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Log");

                    b.Property<int>("Result");

                    b.Property<decimal>("Score");

                    b.Property<Guid>("StudentId");

                    b.Property<string>("Task")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("DisciplineLessonTaskId");

                    b.HasIndex("StudentId");

                    b.ToTable("DisciplineLessonTaskStudentAccepts");
                });

            modelBuilder.Entity("Models.LearningProgress.DisciplineLessonTaskVariant", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<Guid>("DisciplineLessonTaskId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Order");

                    b.Property<string>("VariantNumber")
                        .IsRequired();

                    b.Property<string>("VariantTask")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("DisciplineLessonTaskId");

                    b.ToTable("DisciplineLessonTaskVariants");
                });

            modelBuilder.Entity("Models.LearningProgress.DisciplineStudentRecord", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<Guid>("DisciplineId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Semester");

                    b.Property<Guid>("StudentId");

                    b.Property<int>("SubGroup");

                    b.Property<string>("Variant")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("StudentId");

                    b.ToTable("DisciplineStudentRecords");
                });

            modelBuilder.Entity("Models.Schedule.ConsultationRecord", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid?>("ClassroomId");

                    b.Property<DateTime>("DateConsultation");

                    b.Property<Guid?>("DisciplineId");

                    b.Property<Guid?>("LecturerId");

                    b.Property<string>("LessonClassroom");

                    b.Property<string>("LessonDiscipline");

                    b.Property<string>("LessonGroup");

                    b.Property<string>("LessonLecturer");

                    b.Property<string>("NotParseRecord");

                    b.Property<Guid>("SeasonDatesId");

                    b.Property<Guid?>("StudentGroupId");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomId");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("LecturerId");

                    b.HasIndex("SeasonDatesId");

                    b.HasIndex("StudentGroupId");

                    b.ToTable("ConsultationRecords");
                });

            modelBuilder.Entity("Models.Schedule.ExaminationRecord", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid?>("ClassroomId");

                    b.Property<Guid?>("ConsultationClassroomId");

                    b.Property<DateTime>("DateConsultation");

                    b.Property<DateTime>("DateExamination");

                    b.Property<Guid?>("DisciplineId");

                    b.Property<Guid?>("LecturerId");

                    b.Property<string>("LessonClassroom");

                    b.Property<string>("LessonConsultationClassroom");

                    b.Property<string>("LessonDiscipline");

                    b.Property<string>("LessonGroup");

                    b.Property<string>("LessonLecturer");

                    b.Property<string>("NotParseRecord");

                    b.Property<Guid>("SeasonDatesId");

                    b.Property<Guid?>("StudentGroupId");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomId");

                    b.HasIndex("ConsultationClassroomId");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("LecturerId");

                    b.HasIndex("SeasonDatesId");

                    b.HasIndex("StudentGroupId");

                    b.ToTable("ExaminationRecords");
                });

            modelBuilder.Entity("Models.Schedule.OffsetRecord", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid?>("ClassroomId");

                    b.Property<int>("Day");

                    b.Property<Guid?>("DisciplineId");

                    b.Property<bool>("IsStreaming");

                    b.Property<Guid?>("LecturerId");

                    b.Property<int>("Lesson");

                    b.Property<string>("LessonClassroom");

                    b.Property<string>("LessonDiscipline");

                    b.Property<string>("LessonGroup");

                    b.Property<string>("LessonLecturer");

                    b.Property<string>("NotParseRecord");

                    b.Property<Guid>("SeasonDatesId");

                    b.Property<Guid?>("StudentGroupId");

                    b.Property<int>("Week");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomId");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("LecturerId");

                    b.HasIndex("SeasonDatesId");

                    b.HasIndex("StudentGroupId");

                    b.ToTable("OffsetRecords");
                });

            modelBuilder.Entity("Models.Schedule.ScheduleLessonTime", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("DateBeginLesson");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<DateTime>("DateEndLesson");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Order");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ScheduleLessonTimes");
                });

            modelBuilder.Entity("Models.Schedule.SemesterRecord", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid?>("ClassroomId");

                    b.Property<int>("Day");

                    b.Property<Guid?>("DisciplineId");

                    b.Property<bool>("IsFirstHalfSemester");

                    b.Property<bool>("IsStreaming");

                    b.Property<bool>("IsSubgroup");

                    b.Property<Guid?>("LecturerId");

                    b.Property<int>("Lesson");

                    b.Property<string>("LessonClassroom");

                    b.Property<string>("LessonDiscipline");

                    b.Property<string>("LessonGroup");

                    b.Property<string>("LessonLecturer");

                    b.Property<int>("LessonType");

                    b.Property<string>("NotParseRecord");

                    b.Property<Guid>("SeasonDatesId");

                    b.Property<Guid?>("StudentGroupId");

                    b.Property<int>("Week");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomId");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("LecturerId");

                    b.HasIndex("SeasonDatesId");

                    b.HasIndex("StudentGroupId");

                    b.ToTable("SemesterRecords");
                });

            modelBuilder.Entity("Models.Schedule.StreamingLesson", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<string>("IncomingGroups")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("StreamName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("StreamingLessons");
                });

            modelBuilder.Entity("Models.AcademicYearData.AcademicPlan", b =>
                {
                    b.HasOne("Models.AcademicYearData.AcademicYear", "AcademicYear")
                        .WithMany("AcademicPlans")
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Base.EducationDirection", "EducationDirection")
                        .WithMany("AcademicPlans")
                        .HasForeignKey("EducationDirectionId");
                });

            modelBuilder.Entity("Models.AcademicYearData.AcademicPlanRecord", b =>
                {
                    b.HasOne("Models.AcademicYearData.AcademicPlan", "AcademicPlan")
                        .WithMany("AcademicPlanRecords")
                        .HasForeignKey("AcademicPlanId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.AcademicYearData.Contingent", "Contingent")
                        .WithMany("AcademicPlanRecords")
                        .HasForeignKey("ContingentId");

                    b.HasOne("Models.Base.Discipline", "Discipline")
                        .WithMany("AcademicPlanRecord")
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.AcademicYearData.AcademicPlanRecordElement", b =>
                {
                    b.HasOne("Models.AcademicYearData.AcademicPlanRecord", "AcademicPlanRecord")
                        .WithMany("AcademicPlanRecordElements")
                        .HasForeignKey("AcademicPlanRecordId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.AcademicYearData.TimeNorm", "TimeNorm")
                        .WithMany("AcademicPlanRecordElements")
                        .HasForeignKey("TimeNormId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.AcademicYearData.AcademicPlanRecordMission", b =>
                {
                    b.HasOne("Models.AcademicYearData.AcademicPlanRecordElement", "AcademicPlanRecordElement")
                        .WithMany("AcademicPlanRecordMissions")
                        .HasForeignKey("AcademicPlanRecordElementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Base.Lecturer", "Lecturer")
                        .WithMany("AcademicPlanRecordMissions")
                        .HasForeignKey("LecturerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.AcademicYearData.Contingent", b =>
                {
                    b.HasOne("Models.AcademicYearData.AcademicYear", "AcademicYear")
                        .WithMany()
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Base.EducationDirection", "EducationDirection")
                        .WithMany("Contingents")
                        .HasForeignKey("EducationDirectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.AcademicYearData.DisciplineTimeDistribution", b =>
                {
                    b.HasOne("Models.AcademicYearData.AcademicPlanRecord", "AcademicPlanRecord")
                        .WithMany("DisciplineTimeDistributions")
                        .HasForeignKey("AcademicPlanRecordId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Base.StudentGroup", "StudentGroup")
                        .WithMany()
                        .HasForeignKey("StudentGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.AcademicYearData.DisciplineTimeDistributionClassroom", b =>
                {
                    b.HasOne("Models.AcademicYearData.DisciplineTimeDistribution", "DisciplineTimeDistribution")
                        .WithMany("DisciplineTimeDistributionClassrooms")
                        .HasForeignKey("DisciplineTimeDistributionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.AcademicYearData.TimeNorm", "TimeNorm")
                        .WithMany("DisciplineTimeDistributionClassrooms")
                        .HasForeignKey("TimeNormId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.AcademicYearData.DisciplineTimeDistributionRecord", b =>
                {
                    b.HasOne("Models.AcademicYearData.DisciplineTimeDistribution", "DisciplineTimeDistribution")
                        .WithMany("DisciplineTimeDistributionRecords")
                        .HasForeignKey("DisciplineTimeDistributionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.AcademicYearData.TimeNorm", "TimeNorm")
                        .WithMany("DisciplineTimeDistributionRecords")
                        .HasForeignKey("TimeNormId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.AcademicYearData.IndividualPlan", b =>
                {
                    b.HasOne("Models.AcademicYearData.AcademicYear", "AcademicYear")
                        .WithMany("IndividualPlans")
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Base.Lecturer", "Lecturer")
                        .WithMany("IndividualPlans")
                        .HasForeignKey("LecturerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.AcademicYearData.IndividualPlanKindOfWork", b =>
                {
                    b.HasOne("Models.AcademicYearData.IndividualPlanTitle", "IndividualPlanTitle")
                        .WithMany("IndividualPlanKindOfWorks")
                        .HasForeignKey("IndividualPlanTitleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.AcademicYearData.IndividualPlanNIRContractualWork", b =>
                {
                    b.HasOne("Models.AcademicYearData.IndividualPlan", "IndividualPlan")
                        .WithMany("IndividualPlanNIRContractualWorks")
                        .HasForeignKey("IndividualPlanId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.AcademicYearData.IndividualPlanNIRScientificArticle", b =>
                {
                    b.HasOne("Models.AcademicYearData.IndividualPlan", "IndividualPlan")
                        .WithMany("IndividualPlanNIRScientificArticles")
                        .HasForeignKey("IndividualPlanId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.AcademicYearData.IndividualPlanRecord", b =>
                {
                    b.HasOne("Models.AcademicYearData.IndividualPlan", "IndividualPlan")
                        .WithMany("IndividualPlanRecords")
                        .HasForeignKey("IndividualPlanId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.AcademicYearData.IndividualPlanKindOfWork", "IndividualPlanKindOfWork")
                        .WithMany("IndividualPlanRecords")
                        .HasForeignKey("IndividualPlanKindOfWorkId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.AcademicYearData.LecturerWorkload", b =>
                {
                    b.HasOne("Models.AcademicYearData.AcademicYear", "AcademicYear")
                        .WithMany()
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Base.Lecturer", "Lecturer")
                        .WithMany("LecturerWorkloads")
                        .HasForeignKey("LecturerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.AcademicYearData.SeasonDates", b =>
                {
                    b.HasOne("Models.AcademicYearData.AcademicYear", "AcademicYear")
                        .WithMany("SeasonDates")
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.AcademicYearData.StreamLesson", b =>
                {
                    b.HasOne("Models.AcademicYearData.AcademicYear", "AcademicYear")
                        .WithMany("StreamLessons")
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.AcademicYearData.StreamLessonRecord", b =>
                {
                    b.HasOne("Models.AcademicYearData.AcademicPlanRecordElement", "AcademicPlanRecordElement")
                        .WithMany("StreamLessonRecords")
                        .HasForeignKey("AcademicPlanRecordElementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.AcademicYearData.StreamLesson", "StreamLesson")
                        .WithMany("StreamLessonRecords")
                        .HasForeignKey("StreamLessonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.AcademicYearData.TimeNorm", b =>
                {
                    b.HasOne("Models.AcademicYearData.AcademicYear", "AcademicYear")
                        .WithMany("TimeNorms")
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Base.DisciplineBlock", "DisciplineBlock")
                        .WithMany("TimeNorms")
                        .HasForeignKey("DisciplineBlockId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.Authentication.DepartmentAccess", b =>
                {
                    b.HasOne("Models.Authentication.DepartmentRole", "Role")
                        .WithMany("Access")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.Authentication.DepartmentUser", b =>
                {
                    b.HasOne("Models.Base.Lecturer", "Lecturer")
                        .WithMany()
                        .HasForeignKey("LecturerId");

                    b.HasOne("Models.Base.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("Models.Authentication.DepartmentUserRole", b =>
                {
                    b.HasOne("Models.Authentication.DepartmentRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Authentication.DepartmentUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.Base.Discipline", b =>
                {
                    b.HasOne("Models.Base.DisciplineBlock", "DisciplineBlock")
                        .WithMany("Disciplines")
                        .HasForeignKey("DisciplineBlockId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.Base.Lecturer", b =>
                {
                    b.HasOne("Models.Base.LecturerPost", "LecturerPost")
                        .WithMany("Lecturers")
                        .HasForeignKey("LecturerPostId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.Base.Student", b =>
                {
                    b.HasOne("Models.Base.StudentGroup", "StudentGroup")
                        .WithMany("Students")
                        .HasForeignKey("StudentGroupId");
                });

            modelBuilder.Entity("Models.Base.StudentGroup", b =>
                {
                    b.HasOne("Models.Base.Lecturer", "Curator")
                        .WithMany()
                        .HasForeignKey("CuratorId");

                    b.HasOne("Models.Base.EducationDirection", "EducationDirection")
                        .WithMany("StudentGroups")
                        .HasForeignKey("EducationDirectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.Base.StudentOrderBlock", b =>
                {
                    b.HasOne("Models.Base.EducationDirection", "EducationDirection")
                        .WithMany("StudentOrderBlocks")
                        .HasForeignKey("EducationDirectionId");

                    b.HasOne("Models.Base.StudentOrder", "StudentOrder")
                        .WithMany("StudentOrderBlocks")
                        .HasForeignKey("StudentOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.Base.StudentOrderBlockStudent", b =>
                {
                    b.HasOne("Models.Base.Student", "Student")
                        .WithMany("StudentOrderBlockStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Base.StudentOrderBlock", "StudentOrderBlock")
                        .WithMany("StudentOrderBlockStudents")
                        .HasForeignKey("StudentOrderBlockId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.Examination.ExaminationList", b =>
                {
                    b.HasOne("Models.AcademicYearData.AcademicYear", "AcademicYear")
                        .WithMany("ExaminationLists")
                        .HasForeignKey("AcademicPlanRecordId");

                    b.HasOne("Models.Base.Discipline", "Discipline")
                        .WithMany("ExaminationLists")
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Base.Lecturer", "Lecturer")
                        .WithMany("ExaminationLists")
                        .HasForeignKey("LecturerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Base.StudentGroup", "StudentGroup")
                        .WithMany("ExaminationLists")
                        .HasForeignKey("StudentGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Base.Student", "Student")
                        .WithMany("ExaminationLists")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.Examination.ExaminationTemplate", b =>
                {
                    b.HasOne("Models.Base.Discipline", "Discipline")
                        .WithMany("ExaminationTemplates")
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Base.EducationDirection", "EducationDirection")
                        .WithMany("ExaminationTemplates")
                        .HasForeignKey("EducationDirectionId");

                    b.HasOne("Models.Examination.TicketTemplate", "TicketTemplate")
                        .WithMany("ExaminationTemplates")
                        .HasForeignKey("ExaminationTemplateId");
                });

            modelBuilder.Entity("Models.Examination.ExaminationTemplateBlock", b =>
                {
                    b.HasOne("Models.Examination.ExaminationTemplate", "ExaminationTemplate")
                        .WithMany("ExaminationTemplateBlocks")
                        .HasForeignKey("ExaminationTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.Examination.ExaminationTemplateBlockQuestion", b =>
                {
                    b.HasOne("Models.Examination.ExaminationTemplateBlock", "ExaminationTemplateBlock")
                        .WithMany("ExaminationTemplateBlockQuestions")
                        .HasForeignKey("ExaminationTemplateBlockId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.Examination.ExaminationTemplateTicket", b =>
                {
                    b.HasOne("Models.Examination.ExaminationTemplate", "ExaminationTemplate")
                        .WithMany("ExaminationTemplateTickets")
                        .HasForeignKey("ExaminationTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.Examination.ExaminationTemplateTicketQuestion", b =>
                {
                    b.HasOne("Models.Examination.ExaminationTemplateBlockQuestion", "ExaminationTemplateBlockQuestion")
                        .WithMany("ExaminationTemplateTicketQuestions")
                        .HasForeignKey("ExaminationTemplateBlockQuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Examination.ExaminationTemplateTicket", "ExaminationTemplateTicket")
                        .WithMany("ExaminationTemplateTicketQuestions")
                        .HasForeignKey("ExaminationTemplateTicketId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.Examination.Statement", b =>
                {
                    b.HasOne("Models.AcademicYearData.AcademicYear", "AcademicYear")
                        .WithMany("Statements")
                        .HasForeignKey("AcademicPlanRecordId");

                    b.HasOne("Models.Base.Discipline", "Discipline")
                        .WithMany("Statements")
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Base.Lecturer", "Lecturer")
                        .WithMany("Statements")
                        .HasForeignKey("LecturerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Base.StudentGroup", "StudentGroup")
                        .WithMany("Statements")
                        .HasForeignKey("StudentGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.Examination.StatementRecord", b =>
                {
                    b.HasOne("Models.Examination.Statement", "Statement")
                        .WithMany("StatementRecords")
                        .HasForeignKey("StatementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Base.Student", "Student")
                        .WithMany("StatementRecords")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.Examination.TicketTemplateBody", b =>
                {
                    b.HasOne("Models.Examination.TicketTemplate", "TicketTemplate")
                        .WithOne("TicketTemplateBody")
                        .HasForeignKey("Models.Examination.TicketTemplateBody", "TicketTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.Examination.TicketTemplateBodyProperties", b =>
                {
                    b.HasOne("Models.Examination.TicketTemplateBody", "TicketTemplateBody")
                        .WithOne("TicketTemplateBodyProperties")
                        .HasForeignKey("Models.Examination.TicketTemplateBodyProperties", "TicketTemplateBodyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.Examination.TicketTemplateElementaryAttribute", b =>
                {
                    b.HasOne("Models.Examination.TicketTemplateElementaryUnit", "TicketTemplateElementaryUnit")
                        .WithMany("TicketTemplateElementaryAttributes")
                        .HasForeignKey("TicketTemplateElementaryUnitId");

                    b.HasOne("Models.Examination.TicketTemplateParagraph", "TicketTemplateParagraph")
                        .WithMany()
                        .HasForeignKey("TicketTemplateParagraphId");

                    b.HasOne("Models.Examination.TicketTemplateTableRow", "TicketTemplateTableRow")
                        .WithMany("TicketTemplateElementaryAttributes")
                        .HasForeignKey("TicketTemplateTableRowId");
                });

            modelBuilder.Entity("Models.Examination.TicketTemplateElementaryUnit", b =>
                {
                    b.HasOne("Models.Examination.TicketTemplateElementaryUnit")
                        .WithMany("ChildElementaryUnits")
                        .HasForeignKey("ParentElementaryUnitId");
                });

            modelBuilder.Entity("Models.Examination.TicketTemplateParagraph", b =>
                {
                    b.HasOne("Models.Examination.TicketTemplateBody", "TicketTemplateBody")
                        .WithMany("TicketTemplateParagraphs")
                        .HasForeignKey("TicketTemplateBodyId");

                    b.HasOne("Models.Examination.TicketTemplateTableCell", "TicketTemplateTableCell")
                        .WithMany("TicketTemplateParagraphs")
                        .HasForeignKey("TicketTemplateTableCellId");
                });

            modelBuilder.Entity("Models.Examination.TicketTemplateParagraphProperties", b =>
                {
                    b.HasOne("Models.Examination.TicketTemplateParagraph", "TicketTemplateParagraph")
                        .WithOne("TicketTemplateParagraphProperties")
                        .HasForeignKey("Models.Examination.TicketTemplateParagraphProperties", "TicketTemplateParagraphId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.Examination.TicketTemplateParagraphRun", b =>
                {
                    b.HasOne("Models.Examination.TicketTemplateParagraph", "TicketTemplateParagraph")
                        .WithMany("TicketTemplateParagraphRuns")
                        .HasForeignKey("TicketTemplateParagraphId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.Examination.TicketTemplateParagraphRunProperties", b =>
                {
                    b.HasOne("Models.Examination.TicketTemplateParagraphRun", "TicketTemplateParagraphRun")
                        .WithOne("TicketTemplateParagraphRunProperties")
                        .HasForeignKey("Models.Examination.TicketTemplateParagraphRunProperties", "TicketTemplateParagraphRunId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.Examination.TicketTemplateTable", b =>
                {
                    b.HasOne("Models.Examination.TicketTemplateElementaryUnit", "Columns")
                        .WithMany()
                        .HasForeignKey("ColumnsId");

                    b.HasOne("Models.Examination.TicketTemplateElementaryUnit", "Properties")
                        .WithMany()
                        .HasForeignKey("PropertiesId");

                    b.HasOne("Models.Examination.TicketTemplateBody", "TicketTemplateBody")
                        .WithMany("TicketTemplateTables")
                        .HasForeignKey("TicketTemplateBodyId");
                });

            modelBuilder.Entity("Models.Examination.TicketTemplateTableCell", b =>
                {
                    b.HasOne("Models.Examination.TicketTemplateElementaryUnit", "Properties")
                        .WithMany()
                        .HasForeignKey("PropertiesId");

                    b.HasOne("Models.Examination.TicketTemplateTableRow", "TicketTemplateTableRow")
                        .WithMany("TicketTemplateTableCells")
                        .HasForeignKey("TicketTemplateTableRowId");
                });

            modelBuilder.Entity("Models.Examination.TicketTemplateTableRow", b =>
                {
                    b.HasOne("Models.Examination.TicketTemplateElementaryUnit", "Properties")
                        .WithMany()
                        .HasForeignKey("PropertiesId");

                    b.HasOne("Models.Examination.TicketTemplateTable", "TicketTemplateTable")
                        .WithMany("TicketTemplateTableRows")
                        .HasForeignKey("TicketTemplateTableId");
                });

            modelBuilder.Entity("Models.LaboratoryHead.MaterialTechnicalValue", b =>
                {
                    b.HasOne("Models.Base.Classroom", "Classroom")
                        .WithMany("MaterialTechnicalValues")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.LaboratoryHead.MaterialTechnicalValueRecord", b =>
                {
                    b.HasOne("Models.LaboratoryHead.MaterialTechnicalValueGroup", "MaterialTechnicalValueGroup")
                        .WithMany("MaterialTechnicalValueRecords")
                        .HasForeignKey("MaterialTechnicalValueGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.LaboratoryHead.MaterialTechnicalValue", "MaterialTechnicalValue")
                        .WithMany("MaterialTechnicalValueRecords")
                        .HasForeignKey("MaterialTechnicalValueId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.LaboratoryHead.SoftwareRecord", b =>
                {
                    b.HasOne("Models.LaboratoryHead.MaterialTechnicalValue", "MaterialTechnicalValue")
                        .WithMany("SoftwareRecords")
                        .HasForeignKey("MaterialTechnicalValueId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.LaboratoryHead.Software", "Software")
                        .WithMany("SoftwareRecords")
                        .HasForeignKey("SoftwareId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.LearningProgress.DisciplineLesson", b =>
                {
                    b.HasOne("Models.AcademicYearData.AcademicYear", "AcademicYear")
                        .WithMany("DisciplineLessons")
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Base.Discipline", "Discipline")
                        .WithMany("DisciplineLessons")
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Base.EducationDirection", "EducationDirection")
                        .WithMany("DisciplineLessons")
                        .HasForeignKey("EducationDirectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.AcademicYearData.TimeNorm", "TimeNorm")
                        .WithMany("DisciplineLessons")
                        .HasForeignKey("TimeNormId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.LearningProgress.DisciplineLessonConducted", b =>
                {
                    b.HasOne("Models.LearningProgress.DisciplineLesson", "DisciplineLesson")
                        .WithMany("DisciplineLessonConducteds")
                        .HasForeignKey("DisciplineLessonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Base.StudentGroup", "StudentGroup")
                        .WithMany("DisciplineLessonConducteds")
                        .HasForeignKey("StudentGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.LearningProgress.DisciplineLessonConductedStudent", b =>
                {
                    b.HasOne("Models.LearningProgress.DisciplineLessonConducted", "DisciplineLessonConducted")
                        .WithMany("DisciplineLessonConductedStudents")
                        .HasForeignKey("DisciplineLessonConductedId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Base.Student", "Student")
                        .WithMany("DisciplineLessonConductedStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.LearningProgress.DisciplineLessonTask", b =>
                {
                    b.HasOne("Models.LearningProgress.DisciplineLesson", "DisciplineLesson")
                        .WithMany("DisciplineLessonTasks")
                        .HasForeignKey("DisciplineLessonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.LearningProgress.DisciplineLessonTaskStudentAccept", b =>
                {
                    b.HasOne("Models.LearningProgress.DisciplineLessonTask", "DisciplineLessonTask")
                        .WithMany("DisciplineLessonTaskStudentRecords")
                        .HasForeignKey("DisciplineLessonTaskId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Base.Student", "Student")
                        .WithMany("DisciplineLessonTaskStudentRecords")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.LearningProgress.DisciplineLessonTaskVariant", b =>
                {
                    b.HasOne("Models.LearningProgress.DisciplineLessonTask", "DisciplineLessonTask")
                        .WithMany("DisciplineLessonTaskVariant")
                        .HasForeignKey("DisciplineLessonTaskId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.LearningProgress.DisciplineStudentRecord", b =>
                {
                    b.HasOne("Models.Base.Discipline", "Discipline")
                        .WithMany("DisciplineStudentRecords")
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Base.Student", "Student")
                        .WithMany("DisciplineStudentRecords")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.Schedule.ConsultationRecord", b =>
                {
                    b.HasOne("Models.Base.Classroom", "Classroom")
                        .WithMany()
                        .HasForeignKey("ClassroomId");

                    b.HasOne("Models.Base.Discipline", "Discipline")
                        .WithMany()
                        .HasForeignKey("DisciplineId");

                    b.HasOne("Models.Base.Lecturer", "Lecturer")
                        .WithMany()
                        .HasForeignKey("LecturerId");

                    b.HasOne("Models.AcademicYearData.SeasonDates", "SeasonDates")
                        .WithMany()
                        .HasForeignKey("SeasonDatesId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Base.StudentGroup", "StudentGroup")
                        .WithMany()
                        .HasForeignKey("StudentGroupId");
                });

            modelBuilder.Entity("Models.Schedule.ExaminationRecord", b =>
                {
                    b.HasOne("Models.Base.Classroom", "Classroom")
                        .WithMany()
                        .HasForeignKey("ClassroomId");

                    b.HasOne("Models.Base.Classroom", "ConsultationClassroom")
                        .WithMany()
                        .HasForeignKey("ConsultationClassroomId");

                    b.HasOne("Models.Base.Discipline", "Discipline")
                        .WithMany()
                        .HasForeignKey("DisciplineId");

                    b.HasOne("Models.Base.Lecturer", "Lecturer")
                        .WithMany()
                        .HasForeignKey("LecturerId");

                    b.HasOne("Models.AcademicYearData.SeasonDates", "SeasonDates")
                        .WithMany()
                        .HasForeignKey("SeasonDatesId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Base.StudentGroup", "StudentGroup")
                        .WithMany()
                        .HasForeignKey("StudentGroupId");
                });

            modelBuilder.Entity("Models.Schedule.OffsetRecord", b =>
                {
                    b.HasOne("Models.Base.Classroom", "Classroom")
                        .WithMany()
                        .HasForeignKey("ClassroomId");

                    b.HasOne("Models.Base.Discipline", "Discipline")
                        .WithMany()
                        .HasForeignKey("DisciplineId");

                    b.HasOne("Models.Base.Lecturer", "Lecturer")
                        .WithMany()
                        .HasForeignKey("LecturerId");

                    b.HasOne("Models.AcademicYearData.SeasonDates", "SeasonDates")
                        .WithMany()
                        .HasForeignKey("SeasonDatesId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Base.StudentGroup", "StudentGroup")
                        .WithMany()
                        .HasForeignKey("StudentGroupId");
                });

            modelBuilder.Entity("Models.Schedule.SemesterRecord", b =>
                {
                    b.HasOne("Models.Base.Classroom", "Classroom")
                        .WithMany()
                        .HasForeignKey("ClassroomId");

                    b.HasOne("Models.Base.Discipline", "Discipline")
                        .WithMany()
                        .HasForeignKey("DisciplineId");

                    b.HasOne("Models.Base.Lecturer", "Lecturer")
                        .WithMany()
                        .HasForeignKey("LecturerId");

                    b.HasOne("Models.AcademicYearData.SeasonDates", "SeasonDates")
                        .WithMany()
                        .HasForeignKey("SeasonDatesId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Base.StudentGroup", "StudentGroup")
                        .WithMany()
                        .HasForeignKey("StudentGroupId");
                });
#pragma warning restore 612, 618
        }
    }
}
